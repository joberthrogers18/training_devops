# build = Indica o caminho do seu Dockerfile
build: .

# command = Executa um comando
command: bundle exec thin -p 3000

# container_name = nome do container
container_name: my-web-container

# dns = indica o dns server
dns: 8.8.8.8

# dns_search = Especifica um search domain
dns_search: example.com

# dockerfile = especifica um dockerfile alternativo
dockerfile: Dockerfile-alternate

# env_file = Específica um arquivo com variáveis de ambiente
env_file: .env

# enviroment = adiciona variáveis de ambiente
enviroment:
   RACK_ENV: development

# expose = Expõe a porta do container
expose:
   - "3000"
   - "8000"

# external_links = "Linka" containers que não estão especificados no docker-compose atual
external_links:
   - redis_1
   - project_db_1:mysql

# extra_hosts = adiciona uma entrada no /etc/hosts do container
extra_hosts:
   - "somehost: 162.242.195.82"

#image = Indica uma imagem
image: ubuntu:14.04

# labels = Adiciona metadatas ao container
labels:
   com.example.desciption: "Accounting webapp"
   com.example.department: "Finance"

#link = Linkar container dentro de um docker compose
links:
   - db
   - db:database

# log_driver = Indica o formato do log a ser gerado, por ex: syslog, json-file, etc
log_driver: syslog

OU

logging:
   driver: syslog

# log_opt = Indica onde manda os logs, pode ser local ou em um syslog remoto
log_opt:
   syslog-address: "tcp://192.168.0.42:123"


#net = Modo de uso da internet
net: "bridge"
net: "host"

# ports = expoe as portas do container e do host
ports:
   - "3000"
   - "8000:8000"

# volumes, volume_driver = Monta volume no container
volume:
   # Apenas especifica um caminho e deixar a engine criar um volume 
   - /var/lib/mysql

  # Especifica um caminho absoluto mapeado
  - /opt/data:/var/lib/mysql

  # Caminho do host, relativo ao compose file
  - ./cache:/tmp/cache

# volume_from = Monta volumes atraves de outros containers
volume_from:
   - service_name
   - service_name: ro


